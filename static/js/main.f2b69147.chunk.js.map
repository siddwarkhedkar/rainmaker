{"version":3,"sources":["Components/Analysis/Analysis.js","Components/Homepage/Homepage.js","Components/News/NewsList/NewsList.js","Components/News/NewsForm/NewsForm.js","Components/News/News.js","App.js","serviceWorker.js","index.js"],"names":["events","aapl","map","item","timestamp","moment","Date","date","open","close","low","high","TimeEvent","toDate","sortedCollection","Collection","sortByTime","series","TimeSeries","name","columns","collection","volumeEvents","index","replace","volume","IndexedEvent","sortedVolumeCollection","seriesVolume","utc","Analysis","props","handleTimeRangeChange","timerange","setState","setModeLinear","mode","setModeLog","renderChart","state","croppedSeries","crop","croppedVolumeSeries","timeRange","hideWeekends","enablePanZoom","onTimeRangeChanged","timeAxisStyle","axis","fill","stroke","height","style","normal","interpolation","id","label","min","max","format","width","type","axisMargin","TimeRange","linkStyle","fontWeight","color","cursor","linkStyleActive","className","fontSize","this","onClick","React","Component","Homepage","NewsList","newsData","article","idx","Card","CardActionArea","src","urlToImage","alt","CardContent","Typography","gutterBottom","variant","component","title","description","CardActions","Button","size","href","url","target","NewsForm","handleUserInput","e","key","userInput","value","trim","console","log","searchType","category","TextField","select","displayValues","onChange","handleSearchTypeChange","helperText","fullWidth","option","MenuItem","handleCategoryChange","sports","News","newState","business","science","entertainment","general","technology","health","App","to","path","element","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"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","file":"static/js/main.f2b69147.chunk.js","sourcesContent":["import React from \"react\";\nimport moment from \"moment\";\n\n// Pond\nimport { Collection, TimeSeries, TimeEvent, IndexedEvent, TimeRange } from \"pondjs\";\n\n// Imports from the charts library\nimport { Charts, ChartContainer, ChartRow, YAxis, LineChart, BarChart, Resizable } from 'react-timeseries-charts';\n\nimport aapl from '../../sample-data/stockData.json';\n\n//\n// Price: High, low, open, close\n//\n\nconst name = \"AAPL-price\";\nconst columns = [\"time\", \"open\", \"close\", \"low\", \"high\"];\nconst events = aapl.map(item => {\n    const timestamp = moment(new Date(item.date));\n    const { open, close, low, high } = item;\n    return new TimeEvent(timestamp.toDate(), {\n        open: +open,\n        close: +close,\n        low: +low,\n        high: +high\n    });\n});\nconst collection = new Collection(events);\nconst sortedCollection = collection.sortByTime();\nconst series = new TimeSeries({ name, columns, collection: sortedCollection });\n\n//\n// Volume\n//\n\nconst volumeEvents = aapl.map(item => {\n    const index = item.date.replace(/\\//g, \"-\");\n    const { volume } = item;\n    return new IndexedEvent(index, { volume: +volume });\n});\nconst volumeCollection = new Collection(volumeEvents);\nconst sortedVolumeCollection = volumeCollection.sortByTime();\n\nconst seriesVolume = new TimeSeries({\n    name: \"AAPL-volume\",\n    utc: false,\n    collection: sortedVolumeCollection\n});\n\nclass Analysis extends React.Component {\n    constructor(props) {\n        super(props);\n        this.state = {\n            mode: \"log\",\n            timerange: new TimeRange([1236985288649, 1326654398343])\n        };\n    }\n\n    handleTimeRangeChange = timerange => {\n        this.setState({ timerange });\n    };\n\n    setModeLinear = () => {\n        this.setState({ mode: \"linear\" });\n    };\n\n    setModeLog = () => {\n        this.setState({ mode: \"log\" });\n    };\n\n    renderChart = () => {\n        const { timerange } = this.state;\n        const croppedSeries = series.crop(timerange);\n        const croppedVolumeSeries = seriesVolume.crop(timerange);\n        return (\n            <ChartContainer\n                timeRange={timerange}\n                hideWeekends={true}\n                enablePanZoom={true}\n                onTimeRangeChanged={this.handleTimeRangeChange}\n                timeAxisStyle={{ axis: { fill: \"none\", stroke: \"none\" } }}\n            >\n                <ChartRow height=\"300\">\n                    <Charts>\n                        <LineChart\n                            axis=\"y\"\n                            style={{ close: { normal: { stroke: \"steelblue\" } } }}\n                            columns={[\"close\"]}\n                            series={croppedSeries}\n                            interpolation=\"curveBasis\"\n                        />\n                    </Charts>\n                    <YAxis\n                        id=\"y\"\n                        label=\"Price ($)\"\n                        min={croppedSeries.min(\"close\")}\n                        max={croppedSeries.max(\"close\")}\n                        format=\",.0f\"\n                        width=\"60\"\n                        type={this.state.mode}\n                    />\n                </ChartRow>\n                <ChartRow height=\"200\" axisMargin={0}>\n                    <Charts>\n                        <BarChart\n                            axis=\"y\"\n                            style={{ volume: { normal: { stroke: \"steelblue\" } } }}\n                            columns={[\"volume\"]}\n                            series={croppedVolumeSeries}\n                        />\n                    </Charts>\n                    <YAxis\n                        id=\"y\"\n                        label=\"Volume\"\n                        min={croppedVolumeSeries.min(\"volume\")}\n                        max={croppedVolumeSeries.max(\"volume\")}\n                        width=\"60\"\n                    />\n                </ChartRow>\n            </ChartContainer>\n        );\n    };\n\n    render() {\n        const linkStyle = {\n            fontWeight: 600,\n            color: \"grey\",\n            cursor: \"default\"\n        };\n\n        const linkStyleActive = {\n            color: \"steelblue\",\n            cursor: \"pointer\"\n        };\n\n        return (\n            <div className=\"analysis\">\n                <div className=\"row\">\n                    <div className=\"col-md-12\">\n                        <h3>Apple stock price</h3>\n                    </div>\n                </div>\n\n                <hr />\n\n                <div className=\"row\">\n                    <div className=\"col-md-12\" style={{ fontSize: 14, color: \"#777\" }}>\n                        <span\n                            style={this.state.mode === \"log\" ? linkStyleActive : linkStyle}\n                            onClick={this.setModeLinear}\n                        >\n                            Linear\n                        </span>\n                        <span> | </span>\n                        <span\n                            style={this.state.mode === \"linear\" ? linkStyleActive : linkStyle}\n                            onClick={this.setModeLog}\n                        >\n                            Log\n                        </span>\n                    </div>\n                </div>\n\n                <hr />\n\n                <div className=\"row\">\n                    <div className=\"col-md-12\">\n                        <Resizable>{this.renderChart()}</Resizable>\n                    </div>\n                </div>\n            </div>\n        );\n    }\n}\n\n// Export example\nexport { Analysis };","import React, { Component } from 'react'\nimport PropTypes from 'prop-types'\nimport './Homepage.css'\n\nclass Homepage extends Component {\n    static propTypes = {\n        prop: PropTypes\n    }\n\n    render() {\n        return (\n            <div className='homepage'>\n                <h1>\n                    Rainmaker\n                </h1>\n                <p>\n                    When I was wandering in the desert \n\n                    And was searching for the truth\n\n                    I heard a choir of angels calling out my name\n\n                    I had the feeling that my life would never be the same again\n\n                    I turned my face towards the barren sun\n\n                    And I know of the pain that you feel the same as me\n\n                    And I dream of the rain as it falls upon the leaves\n                    \n                    And the cracks in our lives like the cracks upon the ground\n\n                    They are sealed and are now washed away\n\n                    You tell me we can start the rain\n\n                    You tell me that we all can change\n\n                    You tell me we can find something to wash the tears away\n\n                    You tell me we can start the rain\n\n                    You tell me that we all can change\n                    \n                    You tell me we can find something to wash the tears.....\n                </p>\n            </div>\n        )\n    }\n}\n\nexport { Homepage }","import React, { Component } from 'react'\nimport './NewsList.css'\nimport { Card, CardActionArea, CardContent, Typography, CardActions, Button } from '@material-ui/core'\n\nclass NewsList extends Component {\n\n    render() {\n        const newsData = this.props.newsData;\n        return (\n            <div className=\"newspage\">\n                {\n                    newsData.map((article, idx) => {\n                        return (\n                            <Card className=\"news-list\">\n                                <CardActionArea>\n                                    <section className=\"featuredImage\">\n                                        <img src={article.urlToImage} alt=\"\" />\n                                    </section>\n                                    <CardContent>\n                                        <Typography gutterBottom variant=\"h5\" component=\"h2\">\n                                            {article.title}\n                                        </Typography>\n                                        <Typography variant=\"body2\" color=\"textSecondary\" component=\"p\">\n                                            {article.description}\n                                        </Typography>\n                                    </CardContent>\n                                </CardActionArea>\n                                <CardActions>\n                                    <Button size=\"small\" color=\"primary\" href={article.url} target=\"_blank\">\n                                        Learn More\n                                    </Button>\n                                </CardActions>\n                            </Card>\n                        )\n                    })\n                }\n            </div>\n        )\n    }\n}\n\nexport { NewsList } ","import React, { Component } from 'react'\nimport TextField from '@material-ui/core/TextField'\nimport MenuItem from '@material-ui/core/MenuItem';\nimport './NewsForm.css'\n\nimport category from '../../../sample-data/category.json'\nimport searchType from '../../../sample-data/searchType.json'\n\nclass NewsForm extends Component {\n\n    constructor(props) {\n        super(props)\n\n        this.state = {\n            userInput: '',\n            searchType: '',\n            category: ''\n        }\n    }\n\n    handleUserInput = (e) => {\n        const keyChange = e.key;\n\n        if (keyChange === 'Enter') {\n            this.setState({\n                userInput: e.target.value.trim()\n            })\n            console.log(this.state)\n        }\n\n\n    }\n\n    render() {\n        return (\n            <div>\n                <TextField\n                    id=\"outlined-select-category\"\n                    select\n                    label=\"Select\"\n                    value={this.props.displayValues.searchType}\n                    onChange={this.props.handleSearchTypeChange}\n                    helperText=\"Please select your search type\"\n                    variant=\"outlined\"\n                    fullWidth\n                >\n                    {searchType.map((option) => (\n                        <MenuItem key={option.value} value={option.value}>\n                            {option.label}\n                        </MenuItem>\n                    ))}\n                </TextField>\n                <div className=\"margin\" />\n                <TextField\n                    id=\"outlined-select-category\"\n                    select\n                    label=\"Select\"\n                    value={this.props.displayValues.category}\n                    onChange={this.props.handleCategoryChange}\n                    helperText=\"Please select your category\"\n                    variant=\"outlined\"\n                    fullWidth\n                >\n                    {category.map((option) => (\n                        <MenuItem key={option.value} value={option.value}>\n                            {option.label}\n                        </MenuItem>\n                    ))}\n                </TextField>\n            </div>\n        )\n    }\n}\n\nexport { NewsForm }\n","import React, { Component } from 'react'\nimport './News.css'\nimport { NewsList } from './NewsList'\nimport { NewsForm } from './NewsForm'\nimport business from '../../sample-data/business.json'\nimport science from '../../sample-data/science.json'\nimport entertainment from '../../sample-data/entertainment.json'\nimport general from '../../sample-data/general.json'\nimport technology from '../../sample-data/technology.json'\nimport health from '../../sample-data/health.json'\nimport sports from '../../sample-data/sports.json'\n\nvar newsData = sports;\n\nclass News extends Component {\n    constructor(props) {\n        super(props)\n\n        this.state = {\n            userInput: '',\n            searchType: 'top-headlines',\n            category: 'sports'\n        }\n    }\n\n    handleSearchTypeChange = (e) => {\n        const newState = this.state;\n        newState.searchType = e.target.value;\n        this.setState(newState);\n        console.log(this.state);\n    };\n\n    handleCategoryChange = (e) => {\n        const newState = this.state;\n        newState.category = e.target.value;\n        this.setState(newState);\n        console.log(this.state);\n        if (e.target.value === 'business') {\n            newsData = business\n        } else if (e.target.value === 'science') {\n            newsData = science\n        } else if (e.target.value === 'entertainment') {\n            newsData = entertainment\n        } else if (e.target.value === 'general') {\n            newsData = general\n        } else if (e.target.value === 'technology') {\n            newsData = technology\n        } else if (e.target.value === 'health') {\n            newsData = health\n        } else if (e.target.value === 'sports') {\n            newsData = sports\n        }\n    };\n\n    render() {\n        return (\n            <div className=\"news\">\n                <NewsForm handleCategoryChange={this.handleCategoryChange} handleSearchTypeChange={this.handleSearchTypeChange} displayValues={this.state} />\n                <NewsList newsData={newsData} />\n            </div>\n        )\n    }\n}\n\nexport { News }","import React from 'react';\nimport { Routes, Route, Link } from 'react-router-dom';\nimport { Analysis, News, Homepage } from './Components'\nimport './App.css';\nimport { Button } from '@material-ui/core';\n\nfunction App() {\n\n  return (\n    <div className=\"rainmaker\">\n      <div className=\"button-nav\">\n        <Button className=\"button\"> <Link to=\"analysis\">Analysis</Link> </Button>\n\n        <Button className=\"button\"> <Link to=\"news\">News</Link> </Button>\n      </div>\n      <Routes>\n        {/* localhost:3000/home */}\n        <Route path=\"home\" element={<Homepage />} />\n        {/* localhost:3000/analysis */}\n        <Route path=\"analysis\" element={<Analysis />} />\n        {/* localhost:3000/news */}\n        <Route path=\"news\" element={<News />} />\n      </Routes>\n\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport { BrowserRouter as Router } from 'react-router-dom';\n\nReactDOM.render(\n  <Router>\n    <App />\n  </Router>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}